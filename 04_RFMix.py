#make files for and run RFMix
#python 04_RFmix.py --ref_bcf /home/ryan/Local_ancestry/admixture-simulation/ACB_simulation.ref.bcf.gz --query_vcf /home/ryan/Local_ancestry/admixture-simulation/ACB_simulation.query.vcf --pop admixture_simulation/ACB.txt

import argparse
import os
import pandas as pd

#take in data to convert
parser = argparse.ArgumentParser()
parser.add_argument("--ref_bcf", type = str, action = "store", dest = "ref", required = False, help = "Reference panel generated by admixture-simulation.py. Ends with .ref.bcf.gz.")
parser.add_argument("--query_vcf", type = str, action = "store", dest = "query", required = False, help = "Query genotypes generated by admixture-simulation.py. Ends with .vcf")
parser.add_argument("--pop", type = str, action = "store", dest = "pop", required = False, help = "pop code file that was input into admixture-simulation.py")
args = parser.parse_args() #then pass these arguments to further things

#result = args.result
arg_pop = args.pop
arg_pop_name = arg_pop.split("/")[-1].replace(".txt", "")
ref_bcf = args.ref
os.system("mkdir -p sim_RFMix/")

#split pop file into references ##pop = pd.read_csv("pop_codes_80_20.txt", header = None, sep = "\t")
pop = pd.read_csv(arg_pop, header = None, sep = "\t")
cohort_anc_pops = []
for ref_pop_name in ["NAT", "CEU", "YRI"]:
    ref_pop_IDs = pop.loc[pop[1] == ref_pop_name].drop(1, axis = 1)
    
    if len(ref_pop_IDs > 0): #if that pop is in the cohort
        cohort_anc_pops.append(ref_pop_name)
        ref_pop_IDs.to_csv("sim_RFMix/" + ref_pop_name + "_" + arg_pop_name + "_IDs.txt", index = False, header = False) #write reference id lists to file
    
        #pull reference genos and convert 
        os.system("bcftools view -S sim_RFMix/" + ref_pop_name + "_" + arg_pop_name + "_IDs.txt --force-samples -Oz -o sim_RFMix/" + ref_pop_name + "_" + arg_pop_name + "_ref.vcf.gz " + ref_bcf)
        os.system("bcftools index --threads 40 -f --tbi sim_RFMix/" + ref_pop_name + "_" + arg_pop_name + "_ref.vcf.gz > sim_RFMix/" + ref_pop_name + "_" + arg_pop_name + "_ref.vcf.tbi")

#merge ref and query
os.system("cp " + args.query + " sim_RFMix/" + arg_pop_name + ".vcf; bgzip sim_RFMix/" + arg_pop_name + ".vcf")
os.system("bcftools index --threads 40 -f --tbi sim_RFMix/" + arg_pop_name + ".vcf.gz > sim_RFMix/" + arg_pop_name + ".vcf.tbi")
cohort_anc_pops_str = ""
for cohort_anc_pop in cohort_anc_pops: #some of them only have two ancestries
    cohort_anc_pops_str = cohort_anc_pops_str + "sim_RFMix/" + cohort_anc_pop + "_" + arg_pop_name + "_ref.vcf.gz "
os.system("bcftools merge -Ov " + cohort_anc_pops_str + "sim_RFMix/" + arg_pop_name + ".vcf.gz -o sim_RFMix/" + arg_pop_name + "_merged_unfiltered.vcf")

#remove SNPs without genetic map
os.system("awk '{print $1}' /home/angela/1000G/chr22.interpolated_genetic_map > sim_RFMix/chr22.interpolated_genetic_map.SNPs")
os.system("vcftools --vcf sim_RFMix/" + arg_pop_name + "_merged_unfiltered.vcf --snps sim_RFMix/chr22.interpolated_genetic_map.SNPs --recode --out sim_RFMix/" + arg_pop_name + "_merged; mv sim_RFMix/" + arg_pop_name + "_merged.recode.vcf sim_RFMix/" + arg_pop_name + "_merged.vcf")
os.system("vcf-query -l sim_RFMix/" + arg_pop_name + "_merged.vcf > sim_RFMix/" + arg_pop_name + "_merged.vcf_ids.txt")

#make classes file #arg_pop_name = "pop_codes_80_20"
vcf_IDs = pd.read_csv("sim_RFMix/" + arg_pop_name + "_merged.vcf_ids.txt", header = None, sep = "\t")
vcf_IDs.columns = [("IID")]
pop.columns = ["IID", "pop"]
vcf_pops = pd.merge(vcf_IDs, pop, on = "IID", how = "left")
vcf_pops["pop"] = vcf_pops["pop"].astype("category")
vcf_pops["pop"] = pd.factorize(vcf_pops["pop"])[0] + 1 #admixed is 0
with open("sim_RFMix/" + arg_pop_name + ".classes", "w") as f:
    for item in vcf_pops["pop"]:
        item_str = str(item) + " "
        f.write(item_str) #haplotypes so do it twice
        f.write(item_str)

#make haplotypes file
os.system("bcftools convert --hapsample --vcf-ids sim_RFMix/" + arg_pop_name + "_merged.vcf -o sim_RFMix/" + arg_pop_name + "_merged.haps")
os.system("zcat sim_RFMix/" + arg_pop_name + "_merged.haps.hap.gz | awk '{ $1=\"\"; $2=\"\"; $3=\"\"; $4=\"\"; $5=\"\"; print}' | sed 's/\s//g' > sim_RFMix/" + arg_pop_name + "_merged.haps")
os.system("sed '/##/d' sim_RFMix/" + arg_pop_name + "_merged.vcf | cut -f3 > sim_RFMix/" + arg_pop_name + ".snps")

#make cM map (FIX CHR NUMBER IF NEEDED)
vcf_SNPs = pd.read_csv("sim_RFMix/" + arg_pop_name + ".snps")
#full_gen_map = pd.read_csv("chr22.interpolated_genetic_map", header = None, sep = " ")
full_gen_map = pd.read_csv("/home/angela/1000G/chr22.interpolated_genetic_map", header = None, sep = " ")
vcf_SNPs.columns = [("SNP")]
full_gen_map.columns = ["SNP", "BP", "CM"]
vcf_gen_map = pd.merge(vcf_SNPs, full_gen_map, on = "SNP", how = "left").drop("SNP", axis = 1).drop("BP", axis = 1)
#vcf_gen_map = vcf_gen_map.iloc[1:] #numbering is wonky
vcf_gen_map.to_csv("sim_RFMix/" + arg_pop_name + ".pos", index = False, header = False, sep = "\t", na_rep = "NA")

#if you love her let her go
os.system("cd /home/angela/Ad_PX_pipe_data/RFMix/; python RunRFMix.py -e 2 -w 0.2 --num-threads 10 --use-reference-panels-in-EM --forward-backward PopPhased /home/angela/Local_Ancestry/sim_RFMix/" + arg_pop_name + "_merged.haps /home/angela/Local_Ancestry/sim_RFMix/" + arg_pop_name + ".classes /home/angela/Local_Ancestry/sim_RFMix/" + arg_pop_name + ".pos -o /home/angela/Local_Ancestry/sim_RFMix/" + arg_pop_name + ".rfmix")
